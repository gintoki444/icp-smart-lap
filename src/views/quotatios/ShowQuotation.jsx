import React, { useState, useEffect } from 'react';
import { Document, Page, Text, Image, View, StyleSheet, PDFDownloadLink, Font, pdf } from '@react-pdf/renderer';
import { Badge, Button, ButtonGroup, Col, Row, Table, Modal, Card, Form } from 'react-bootstrap';
import logo from '../../assets/images/logo/logo.png';
import { deleteQuotations, getAllQuotationRequestsById, getQuotationsByID } from 'services/_api/quotationRequest';
import { toast } from 'react-toastify';
import { RiDeleteBin5Line, RiMailSendLine } from 'react-icons/ri';
import { LuView } from 'react-icons/lu';
import { Tooltip } from '@mui/material';
import { MdOutlineSimCardDownload } from 'react-icons/md';
import { deleteSampleStatus } from 'services/_api/sampleStatusRequest';
import { postSendEmail } from 'services/_api/emailRequest';
import { handleUploadFiles } from 'services/_api/uploadFileRequest';
import { authenUser } from 'services/_api/authentication';
import { getUserByID } from 'services/_api/usersRequest';
import { CircularProgress, Backdrop } from '@mui/material';
import { BsFiletypePdf } from 'react-icons/bs';
// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
Font.register({
  family: 'THSarabunNew',
  fonts: [{ src: '/assets/fonts/THSarabunNew.ttf' }, { src: '/assets/fonts/THSarabunNew-Bold.ttf', fontWeight: 'bold' }]
});

// ‚úÖ Component ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á PDF
const MyDocument = ({ quotation }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <QuotationHeader quotation={quotation} />

      {/* Content */}
      <QuotationContent quotation={quotation} />

      {/* Footer */}
      <QuotationFooter quotation={quotation} />
    </Page>
  </Document>
);

const setNumber = (data) => {
  const isNumber = parseFloat(data).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });

  return isNumber;
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á PDF ‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const generateAndSendPDF = async (quotation, userData) => {
  const toEmail = userData.toEmail;
  const subject = userData.subject;
  const username = userData.username;
  const message = `
<p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ <strong>${quotation.customer_info[0]?.company_name}</strong>,</p>

<p>‡∏£‡∏∞‡∏ö‡∏ö ICP Smart Lab ‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ ‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:</p>

<p>
üßæ <strong>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</strong>: ${quotation.quotation_no}<br>
üìÖ <strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</strong>: ${new Date(quotation.quotation_date).toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' })}<br>
üìÖ <strong>‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</strong>: ${new Date(quotation.valid_until).toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' })}
</p>

<p>
üìå <strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</strong>:<br>
${quotation.request_no_list_by_quotation}
</p>

<p>
üíµ <strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏£‡∏ß‡∏° VAT)</strong>: ${parseFloat(quotation.grand_total).toLocaleString('th-TH', { minimumFractionDigits: 2 })} ‡∏ö‡∏≤‡∏ó<br>
üìù <strong>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</strong>: ${quotation.payment_terms}<br>
üìÑ <strong>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©</strong>: ${quotation.customer_info[0]?.special_conditions || '-'}
</p>

<p>
üîç <strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</strong>:<br>
${quotation.quotation_details.map((q) => `‚Ä¢ ${q.name_for_quotation} x${q.quantity}`).join('<br>')}
</p>

<p>
‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
</p>

<p>
‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠,<br>
ICP Smart Lab
</p>
`;

  try {
    // Step 1: Generate the PDF blob
    const pdfBlob = await pdf(<MyDocument quotation={quotation} />).toBlob();

    // Step 2: Create a File object from the Blob for uploading
    const pdfFile = new File([pdfBlob], `${quotation.quotation_no}.pdf`, { type: 'application/pdf' });

    // Step 3: Upload the PDF to Firebase using handleUploadFiles
    const filesArray = [pdfFile]; // Convert to array as expected by handleUploadFiles
    const uploadResults = await handleUploadFiles(
      filesArray,
      `quotation/${quotation.quotation_no}`,
      `${quotation.quotation_no}-${Date.now()}`
    );

    // Step 4: Check if the upload was successful
    if (!uploadResults || uploadResults.length === 0) {
      throw new Error('‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }

    console.log('uploadResults:', uploadResults);
    const filePaths = uploadResults.map((result) => result.fileName);

    // Step 5: Prepare email data with the uploaded file path
    const emailData = {
      toEmail: toEmail,
      subject: subject,
      message: message,
      username: username,
      filePath: filePaths.length > 0 ? filePaths[0] : null // Use the first file path
    };

    // Step 6: Send the email using postSendEmail
    const response = await postSendEmail(emailData);

    // Step 7: Show success message
    toast.success('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', { autoClose: 3000 });
    console.log('postSendEmail:', response);
  } catch (error) {
    console.error('‚ùå Failed to send email or upload file:', error);
    toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå', { autoClose: 3000 });
  }
};
// const generateAndSendPDF = async (quotation) => {
//   const toEmail = quotation.customer_info[0]?.email || 'ginjung01@gmail.com';
//   const subject = `‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ${quotation.quotation_no}`;
//   const message = '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠';
//   const username = 'Chanu';

//   try {
//     const pdfBlob = await pdf(<MyDocument quotation={quotation} />).toBlob();
//     const formData = new FormData();
//     formData.append('toEmail', toEmail);
//     formData.append('subject', subject);
//     formData.append('message', message);
//     formData.append('username', username);
//     formData.append('file', pdfBlob, `${quotation.quotation_no}.pdf`);

//     const response = await fetch('https://apiav2-3mp52qu73a-as.a.run.app/api/send-mail-file', {
//       method: 'POST',
//       body: formData
//     });

//     const result = await response.json();
//     console.log(result.message);
//   } catch (error) {
//     console.error('‚ùå Failed to send email', error);
//   }
// };

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
export const generatePDF = async (quotation) => {
  const pdfBlob = await pdf(<MyDocument quotation={quotation} />).toBlob();
  const url = URL.createObjectURL(pdfBlob);
  window.open(url);
};

// ‚úÖ Component ‡∏´‡∏•‡∏±‡∏Å
const ShowQuotation = ({ id, service }) => {
  const [quotations, setQuotations] = useState([]);
  //   const [dataSend, setDataSend] = useState([]);
  //   const [formData, setFormData] = useState({
  //     toEmail: '',
  //     subject: '',
  //     message: '',
  //     username: '',
  //     files: null
  //   });

  //   const [validated, setValidated] = useState(false);
  const [loading, setLoading] = useState(false);
  //   const [error, setError] = useState(null);
  //   const [showModal, setShowModal] = useState(false);
  //   useEffect(() => {
  //     const fetchUserData = async () => {
  //       try {
  //         // const token = localStorage.getItem('authToken');
  //         // const response = await authenUser(token);
  //         const userData = await getUserByID(service.user_id);
  //         console.log('userData:', userData);
  //         if (userData.user_id) {
  //           setFormData((prev) => ({
  //             ...prev,
  //             subject: `‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ${service.quotation_no}`,
  //             toEmail: userData.email,
  //             username: userData.first_name + ' ' + userData.last_name
  //           }));
  //         } else {
  //           setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ');
  //         }
  //       } catch (err) {
  //         setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ' + err.message);
  //       }
  //     };

  //     fetchUserData();
  //   }, []);

  useEffect(() => {
    const fetchAllQuotations = async () => {
      try {
        setLoading(true);
        const data = await getAllQuotationRequestsById(id);
        console.log('getAllQuotationRequestsById:', data);
        setQuotations(data);
        setLoading(false);
      } catch (err) {
        setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ' + err.message);
      }
    };

    console.log('id:', id);
    if (id) fetchAllQuotations();
  }, [id]);
  return (
    <>
      {quotations.map((data, index) => (
        <span
          key={`quotations-doc-${index}`}
          className="d-flex justify-content-center align-items-center link-files text-primary"
          size="sm"
          onClick={() => generatePDF(data)}
        >
          <BsFiletypePdf style={{ fontSize: 16, marginRight: 8 }} /> {data.quotation_no}
        </span>
      ))}
    </>
  );
};

// ‚úÖ ‡∏™‡πà‡∏ß‡∏ô Header
const QuotationHeader = ({ quotation }) => {
  // Get the current date (March 27, 2025, as per system context)
  const currentDate = new Date('2025-03-27');

  // Format the date to DD/MM/YY (Thai format, year in Buddhist Era - 543)
  const day = String(currentDate.getDate()).padStart(2, '0');
  const month = String(currentDate.getMonth() + 1).padStart(2, '0');
  const year = String(currentDate.getFullYear() - 2000).padStart(2, '0'); // Get last two digits of the year (2025 -> 25)
  const formattedDate = `${day}/${month}/${year}`; // e.g., "27/03/25"

  // Page number (hardcoded as 1/1 since this is a single-page document)
  const currentPage = 1;
  const totalPages = 1;
  const pageInfo = `P ${currentPage}/${totalPages}`; // e.g., "P 1/1"

  return (
    <View>
      <View style={styles.headerContainer}>
        <View style={{ maxWidth: 50 }}>
          <Image src={logo} style={styles.logo} />
        </View>
        <View>
          <Text style={[styles.companyInfo, styles.boldText, { fontSize: 14 }]}>‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÑ‡∏≠ ‡∏ã‡∏µ ‡∏û‡∏µ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏• ‡∏à‡∏≥‡∏Å‡∏±‡∏î</Text>
          <Text style={styles.companyInfo}>307 ‡∏´‡∏°‡∏π‡πà 7 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏ï.‡∏ó‡∏∏‡πà‡∏á‡∏™‡∏∏‡∏Ç‡∏•‡∏≤ ‡∏≠.‡∏®‡∏£‡∏µ‡∏£‡∏≤‡∏ä‡∏≤ ‡∏à.‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ 20230</Text>
          <Text style={styles.companyInfo}>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 038-352170-3 ‡∏ï‡πà‡∏≠ 401, 090-9606091</Text>
        </View>

        <View style={{ width: 160 }}>
          <Text style={styles.companyInfo}>
            FM-LB-26 Rev.01 ({formattedDate}) {pageInfo}
          </Text>
          <View style={styles.quotationBox}>
            <Text style={[styles.quotationTitle, styles.boldText]}>‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ /</Text>
            <Text style={[styles.quotationTitle, styles.boldText]}>QUOTATION</Text>
          </View>
        </View>
      </View>
      <View style={styles.sectionDivider} />
      {quotation.customer_info && quotation.customer_info.length > 0 && (
        <View style={styles.infoRow}>
          <View>
            <Text>
              <Text style={styles.boldText}>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô : </Text>
              <Text style={styles.normalText}>{quotation.customer_info[0].company_name}</Text>
            </Text>
            <Text>
              <Text style={styles.boldText}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà : </Text>
              <Text style={styles.normalText}>{quotation.customer_info[0].company_address}</Text>
            </Text>
          </View>
          <View>
            <Text>
              <Text style={styles.boldText}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : </Text>
              {new Date(quotation.quotation_date).toLocaleDateString('th-TH')}
            </Text>
            <Text>
              <Text style={styles.boldText}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ : </Text>
              {quotation.quotation_no}
            </Text>
            {quotation?.quotation_type_id && quotation?.quotation_type_id !== 1 && (
              <Text>
                <Text style={styles.boldText}>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô : </Text>
                {quotation?.quotation_type_id === 2 ? '7 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ú‡∏•' : '30 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏ú‡∏•'}
              </Text>
            )}
          </View>
        </View>
      )}
    </View>
  );
};

// ‚úÖ ‡∏™‡πà‡∏ß‡∏ô Content (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
const QuotationContent = ({ quotation }) => {
  console.log('quotation:', quotation);
  const MAX_ROWS = 15;
  const formattedItems = quotation.quotation_details
    ? [
        ...quotation.quotation_details.map((item, index) => [
          (index + 1).toString(),
          item.name_for_quotation,
          setNumber(item.unit_price),
          item.quantity.toString(),
          setNumber(item.subtotal_price)
        ]),
        ...Array.from({ length: MAX_ROWS - quotation.quotation_details.length }, () => ['', '', '', '', ''])
      ].slice(0, MAX_ROWS)
    : Array(MAX_ROWS).fill(['', '', '', '', '']);

  return (
    <View>
      <Text style={{ fontSize: 14, marginTop: 0 }}>
        ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÑ‡∏≠ ‡∏ã‡∏µ ‡∏û‡∏µ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ô‡∏• ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡∏î‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
      </Text>
      <View style={[contentStyles.table, { marginTop: 0 }]}>
        <View style={[contentStyles.tableRow, contentStyles.tableHeader]}>
          <Text style={[contentStyles.tableCell, { flex: 0.6, borderRight: 2, paddingTop: 10, paddingBottom: 10 }]}>‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà</Text>
          <Text style={[contentStyles.tableCell, { flex: 4, borderRight: 2, paddingTop: 10, paddingBottom: 10 }]}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Text>
          <View
            style={[
              contentStyles.tableCell,
              { flex: 1, borderRight: 2, paddingTop: 0, flexDirection: 'column', justifyContent: 'center', lineHeight: 1 }
            ]}
          >
            <Text style={{ marginBottom: 0 }}>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏≠‡∏¢‡πà‡∏≤‡∏á</Text>
            <Text>(‡∏ö‡∏≤‡∏ó)</Text>
          </View>
          <Text style={[contentStyles.tableCell, { flex: 0.9, borderRight: 2, paddingTop: 10, paddingBottom: 10 }]}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</Text>
          <View
            style={[contentStyles.tableCell, { flex: 1, paddingTop: 0, flexDirection: 'column', justifyContent: 'center', lineHeight: 1 }]}
          >
            <Text style={{ marginBottom: 0 }}>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</Text>
            <Text>(‡∏ö‡∏≤‡∏ó)</Text>
          </View>
        </View>
        {formattedItems.map((row, index) => (
          <View key={index} style={[contentStyles.tableRow]}>
            {row.map((cell, cellIndex) => (
              <Text
                key={cellIndex}
                style={[
                  contentStyles.tableCell,
                  { flex: cellWidth[cellIndex]?.width, borderRight: cellIndex !== 4 ? 2 : 0, borderBottom: index !== 14 ? 1 : 0 },
                  cellIndex === 1 ? { textAlign: 'left' } : cellIndex === 2 || cellIndex === 4 ? contentStyles.textRight : {}
                ]}
              >
                {cell}
              </Text>
            ))}
          </View>
        ))}
        <View style={[contentStyles.tableRow, { borderTop: 2 }]}>
          <Text style={[contentStyles.tableCell, { flex: 7, textAlign: 'left' }]}>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö</Text>
          <Text style={[contentStyles.tableCell, { flex: 1, textAlign: 'right', borderLeft: 2 }]}>
            {setNumber(quotation.total_amount)} ‡∏ö‡∏≤‡∏ó
          </Text>
        </View>
        {(quotation.discount_percentage !== '0.00' || quotation.discount_amount) && (
          <View style={[contentStyles.tableRow, { borderTop: 1 }]}>
            <Text style={[contentStyles.tableCell, { flex: 7, textAlign: 'left' }]}>
              ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
              {quotation.discount_percentage !== '0.00' ? (
                <>
                  <Text style={{ padding: 20, borderBottom: 2, fontSize: 14, fontWeight: 'bold' }}> {quotation.discount_percentage}</Text> %
                </>
              ) : (
                ' (‡∏ö‡∏≤‡∏ó)'
              )}
            </Text>
            <Text style={[contentStyles.tableCell, { flex: 1, textAlign: 'right', borderLeft: 2 }]}>
              {setNumber(quotation.discount_amount)} ‡∏ö‡∏≤‡∏ó
            </Text>
          </View>
        )}
        <View style={[contentStyles.tableRow, { borderTop: 1 }]}>
          <Text style={[contentStyles.tableCell, { flex: 7, textAlign: 'left' }]}>‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° (Vat) 7%</Text>
          <Text style={[contentStyles.tableCell, { flex: 1, textAlign: 'right', borderLeft: 2 }]}>
            {setNumber(quotation.vat_amount)} ‡∏ö‡∏≤‡∏ó
          </Text>
        </View>
        <View style={[contentStyles.tableRow, { borderTop: 1 }]}>
          <Text style={[contentStyles.tableCell, { flex: 7, textAlign: 'left' }]}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</Text>
          <Text style={[contentStyles.tableCell, { flex: 1, textAlign: 'right', borderLeft: 2 }]}>
            {setNumber(quotation.net_total)}
            ‡∏ö‡∏≤‡∏ó
          </Text>
        </View>
        <View style={[contentStyles.tableRow, { borderTop: 1, backgroundColor: '#ababab' }]}>
          <Text style={[contentStyles.tableCell, { flex: 7, textAlign: 'left' }]}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</Text>
          <Text style={[contentStyles.tableCell, { flex: 1, textAlign: 'right', borderLeft: 2 }]}>
            {setNumber(quotation.grand_total)} ‡∏ö‡∏≤‡∏ó
          </Text>
        </View>
      </View>
    </View>
  );
};

// ‚úÖ ‡∏™‡πà‡∏ß‡∏ô Footer (‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
const QuotationFooter = ({ quotation }) => (
  <View style={stylesFooter.footerContainer}>
    {/* ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
    <Text style={[stylesFooter.paymentTitle, styles.boldText]}>‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô :</Text>
    <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
      <Text style={stylesFooter.paymentText}>1. ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÑ‡∏≠ ‡∏ã‡∏µ ‡∏û‡∏µ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏• ‡∏à‡∏≥‡∏Å‡∏±‡∏î</Text>
      <Text style={stylesFooter.taxNumber}>(‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ: 0205547009421)</Text>
    </View>
    <Text style={stylesFooter.paymentText}>
      2. ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏¢‡∏±‡∏á somluk.meesakun@icpinter.com
    </Text>

    {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ */}
    <View style={{ marginTop: 10 }}>
      <View style={[stylesFooter.table, { margin: 'auto' }]}>
        <View style={stylesFooter.tableRow}>
          <Text style={stylesFooter.tableHeader}>‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</Text>
          <Text style={stylesFooter.tableHeader}>‡∏™‡∏≤‡∏Ç‡∏≤</Text>
          <Text style={stylesFooter.tableHeader}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Text>
          <Text style={stylesFooter.tableHeader}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</Text>
        </View>
        {[
          ['‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '001-3-50193-0'],
          ['‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢', '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏á‡∏©‡πå', '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '018-1-14367-3'],
          ['‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢', '‡∏™‡∏∏‡∏£‡∏ß‡∏á‡∏®‡πå', '‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '078-1-18116-9']
        ].map((row, index) => (
          <View style={stylesFooter.tableRow} key={index}>
            {row.map((cell, cellIndex) => (
              <Text key={cellIndex} style={stylesFooter.tableCell}>
                {cell}
              </Text>
            ))}
          </View>
        ))}
      </View>
    </View>

    {/* ‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠ + ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô */}
    <View style={[stylesFooter.signatureContainer, { marginTop: 5 }]}>
      <Text style={{ fontSize: 14 }}>‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠</Text>
      <View style={stylesFooter.signatureLine} />
      <Text style={stylesFooter.signatureText}>( ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ )</Text>
      <Text style={stylesFooter.signatureText}>‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</Text>
    </View>
  </View>
);

// ‚úÖ Styles
const styles = StyleSheet.create({
  page: { padding: 10, paddingHorizontal: 40, fontFamily: 'THSarabunNew' },
  boldText: { fontFamily: 'THSarabunNew', fontWeight: 'bold' },
  normalText: { fontFamily: 'THSarabunNew' },
  headerContainer: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' },
  logo: { width: 80, height: 80 },
  companyInfo: { fontSize: 12, textAlign: 'right' },
  quotationBox: {
    borderWidth: 2,
    borderColor: '#000',
    borderRadius: 10,
    padding: 8,
    textAlign: 'center',
    width: 160,
    fontSize: 14
  },
  quotationTitle: { fontSize: 18 },
  sectionDivider: { borderBottomWidth: 2, borderBottomColor: '#000', marginVertical: 2 },
  infoRow: { flexDirection: 'row', justifyContent: 'space-between', fontSize: 14, marginTop: 5 }
});

const contentStyles = StyleSheet.create({
  table: { display: 'table', width: '100%', borderCollapse: 'collapse', borderWidth: 2, marginVertical: 10 },
  tableRow: { flexDirection: 'row' },
  tableCell: {
    flex: 1,
    fontSize: 12,
    paddingTop: 2,
    paddingHorizontal: 4,
    textAlign: 'center',
    borderColor: '#000',
    minHeight: 18
  },
  tableHeader: {
    backgroundColor: '#f3f3f3',
    fontWeight: 'bold',
    borderBottomWidth: 2,
    textAlign: 'center'
  },
  textRight: { textAlign: 'right' },
  summaryRow: { flexDirection: 'row', marginTop: 5 },
  summaryLabel: { flex: 3, fontSize: 14, padding: 5 },
  summaryValue: { flex: 1, textAlign: 'right', fontSize: 14, padding: 5 }
});

const stylesFooter = StyleSheet.create({
  footerContainer: { position: 'absolute', bottom: 15, left: 40, right: 40 },
  paymentTitle: { fontSize: 14 },
  paymentText: { fontSize: 14, marginBottom: 2 },
  taxNumber: { fontSize: 14, textAlign: 'right' },
  table: { display: 'table', width: '80%', borderWidth: 2, marginVertical: 10 },
  tableRow: { flexDirection: 'row' },
  tableHeader: {
    fontSize: 14,
    fontWeight: 'bold',
    borderColor: '#000',
    paddingTop: 2,
    paddingHorizontal: 4,
    textAlign: 'center',
    flex: 1,
    minHeight: 18
  },
  tableCell: {
    fontSize: 12,
    borderTopWidth: 1,
    borderColor: '#000',
    paddingHorizontal: 4,
    textAlign: 'center',
    flex: 1,
    minHeight: 18
  },
  signatureContainer: { marginTop: 5, marginLeft: 'auto', marginRight: '10%', textAlign: 'center', width: '30%' },
  signatureLine: { borderBottomWidth: 2, width: '100%', alignSelf: 'center', marginBottom: 5, marginTop: 20 },
  signatureText: { fontSize: 12, textAlign: 'center' }
});

const cellWidth = [{ width: 0.6 }, { width: 4 }, { width: 1 }, { width: 0.9 }, { width: 1 }];

export default ShowQuotation;
